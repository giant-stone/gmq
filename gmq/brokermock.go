// Code generated by MockGen. DO NOT EDIT.
// Source: gmq/broker.go

// Package gmq is a generated GoMock package.
package gmq

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBroker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBrokerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBroker)(nil).Close))
}

// Complete mocks base method.
func (m *MockBroker) Complete(ctx context.Context, msg IMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockBrokerMockRecorder) Complete(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockBroker)(nil).Complete), ctx, msg)
}

// DeleteAgo mocks base method.
func (m *MockBroker) DeleteAgo(ctx context.Context, queueName string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgo", ctx, queueName, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgo indicates an expected call of DeleteAgo.
func (mr *MockBrokerMockRecorder) DeleteAgo(ctx, queueName, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgo", reflect.TypeOf((*MockBroker)(nil).DeleteAgo), ctx, queueName, duration)
}

// DeleteMsg mocks base method.
func (m *MockBroker) DeleteMsg(ctx context.Context, queueName, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMsg", ctx, queueName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsg indicates an expected call of DeleteMsg.
func (mr *MockBrokerMockRecorder) DeleteMsg(ctx, queueName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsg", reflect.TypeOf((*MockBroker)(nil).DeleteMsg), ctx, queueName, id)
}

// DeleteQueue mocks base method.
func (m *MockBroker) DeleteQueue(ctx context.Context, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", ctx, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockBrokerMockRecorder) DeleteQueue(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockBroker)(nil).DeleteQueue), ctx, queueName)
}

// Dequeue mocks base method.
func (m *MockBroker) Dequeue(ctx context.Context, queueName string) (*Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", ctx, queueName)
	ret0, _ := ret[0].(*Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockBrokerMockRecorder) Dequeue(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockBroker)(nil).Dequeue), ctx, queueName)
}

// Enqueue mocks base method.
func (m *MockBroker) Enqueue(ctx context.Context, msg IMsg, opts ...OptionClient) (*Msg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(*Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockBrokerMockRecorder) Enqueue(ctx, msg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockBroker)(nil).Enqueue), varargs...)
}

// Fail mocks base method.
func (m *MockBroker) Fail(ctx context.Context, msg IMsg, errFail error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fail", ctx, msg, errFail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fail indicates an expected call of Fail.
func (mr *MockBrokerMockRecorder) Fail(ctx, msg, errFail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockBroker)(nil).Fail), ctx, msg, errFail)
}

// GetMsg mocks base method.
func (m *MockBroker) GetMsg(ctx context.Context, queueName, id string) (*Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsg", ctx, queueName, id)
	ret0, _ := ret[0].(*Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsg indicates an expected call of GetMsg.
func (mr *MockBrokerMockRecorder) GetMsg(ctx, queueName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsg", reflect.TypeOf((*MockBroker)(nil).GetMsg), ctx, queueName, id)
}

// GetStats mocks base method.
func (m *MockBroker) GetStats(ctx context.Context) ([]*QueueStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].([]*QueueStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockBrokerMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockBroker)(nil).GetStats), ctx)
}

// GetStatsByDate mocks base method.
func (m *MockBroker) GetStatsByDate(ctx context.Context, listQueueNames []string, YYYYMMDD string) (*QueueDailyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsByDate", ctx, listQueueNames, YYYYMMDD)
	ret0, _ := ret[0].(*QueueDailyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsByDate indicates an expected call of GetStatsByDate.
func (mr *MockBrokerMockRecorder) GetStatsByDate(ctx, listQueueNames, YYYYMMDD interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsByDate", reflect.TypeOf((*MockBroker)(nil).GetStatsByDate), ctx, listQueueNames, YYYYMMDD)
}

// GetStatsWeekly mocks base method.
func (m *MockBroker) GetStatsWeekly(ctx context.Context, listQueueNames []string) ([]*QueueDailyStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsWeekly", ctx, listQueueNames)
	ret0, _ := ret[0].([]*QueueDailyStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsWeekly indicates an expected call of GetStatsWeekly.
func (mr *MockBrokerMockRecorder) GetStatsWeekly(ctx, listQueueNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsWeekly", reflect.TypeOf((*MockBroker)(nil).GetStatsWeekly), ctx, listQueueNames)
}

// Init mocks base method.
func (m *MockBroker) Init(ctx context.Context, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockBrokerMockRecorder) Init(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockBroker)(nil).Init), ctx, queueName)
}

// ListFailed mocks base method.
func (m *MockBroker) ListFailed(ctx context.Context, queueName, msgId string, limit, offset int64) ([]*Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailed", ctx, queueName, msgId, limit, offset)
	ret0, _ := ret[0].([]*Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailed indicates an expected call of ListFailed.
func (mr *MockBrokerMockRecorder) ListFailed(ctx, queueName, msgId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailed", reflect.TypeOf((*MockBroker)(nil).ListFailed), ctx, queueName, msgId, limit, offset)
}

// ListMsg mocks base method.
func (m *MockBroker) ListMsg(ctx context.Context, queueName, state string, limit, offset int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMsg", ctx, queueName, state, limit, offset)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMsg indicates an expected call of ListMsg.
func (mr *MockBrokerMockRecorder) ListMsg(ctx, queueName, state, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMsg", reflect.TypeOf((*MockBroker)(nil).ListMsg), ctx, queueName, state, limit, offset)
}

// ListQueue mocks base method.
func (m *MockBroker) ListQueue(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueue", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueue indicates an expected call of ListQueue.
func (mr *MockBrokerMockRecorder) ListQueue(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueue", reflect.TypeOf((*MockBroker)(nil).ListQueue), ctx)
}

// Pause mocks base method.
func (m *MockBroker) Pause(ctx context.Context, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", ctx, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockBrokerMockRecorder) Pause(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockBroker)(nil).Pause), ctx, queueName)
}

// Ping mocks base method.
func (m *MockBroker) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBrokerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBroker)(nil).Ping), ctx)
}

// Resume mocks base method.
func (m *MockBroker) Resume(ctx context.Context, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", ctx, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockBrokerMockRecorder) Resume(ctx, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockBroker)(nil).Resume), ctx, queueName)
}

// SetClock mocks base method.
func (m *MockBroker) SetClock(c Clock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClock", c)
}

// SetClock indicates an expected call of SetClock.
func (mr *MockBrokerMockRecorder) SetClock(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClock", reflect.TypeOf((*MockBroker)(nil).SetClock), c)
}

// UTC mocks base method.
func (m *MockBroker) UTC(flag bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UTC", flag)
}

// UTC indicates an expected call of UTC.
func (mr *MockBrokerMockRecorder) UTC(flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTC", reflect.TypeOf((*MockBroker)(nil).UTC), flag)
}
